# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: mnist_DNN.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='mnist_DNN.proto',
  package='mnist_DNN',
  syntax='proto3',
  serialized_pb=_b('\n\x0fmnist_DNN.proto\x12\tmnist_DNN\";\n\nImageArray\x12\x0f\n\x07in_type\x18\x01 \x01(\t\x12\r\n\x05image\x18\x02 \x03(\x02\x12\r\n\x05label\x18\x03 \x01(\x05\"\x17\n\x05\x44igit\x12\x0e\n\x06\x64igits\x18\x01 \x03(\x05\x32\x86\x01\n\x0fmnist_Inference\x12\x35\n\x08GetInput\x12\x15.mnist_DNN.ImageArray\x1a\x10.mnist_DNN.Digit\"\x00\x12<\n\rGetMultiInput\x12\x15.mnist_DNN.ImageArray\x1a\x10.mnist_DNN.Digit\"\x00(\x01\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_IMAGEARRAY = _descriptor.Descriptor(
  name='ImageArray',
  full_name='mnist_DNN.ImageArray',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='in_type', full_name='mnist_DNN.ImageArray.in_type', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='image', full_name='mnist_DNN.ImageArray.image', index=1,
      number=2, type=2, cpp_type=6, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='label', full_name='mnist_DNN.ImageArray.label', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=30,
  serialized_end=89,
)


_DIGIT = _descriptor.Descriptor(
  name='Digit',
  full_name='mnist_DNN.Digit',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='digits', full_name='mnist_DNN.Digit.digits', index=0,
      number=1, type=5, cpp_type=1, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=91,
  serialized_end=114,
)

DESCRIPTOR.message_types_by_name['ImageArray'] = _IMAGEARRAY
DESCRIPTOR.message_types_by_name['Digit'] = _DIGIT

ImageArray = _reflection.GeneratedProtocolMessageType('ImageArray', (_message.Message,), dict(
  DESCRIPTOR = _IMAGEARRAY,
  __module__ = 'mnist_DNN_pb2'
  # @@protoc_insertion_point(class_scope:mnist_DNN.ImageArray)
  ))
_sym_db.RegisterMessage(ImageArray)

Digit = _reflection.GeneratedProtocolMessageType('Digit', (_message.Message,), dict(
  DESCRIPTOR = _DIGIT,
  __module__ = 'mnist_DNN_pb2'
  # @@protoc_insertion_point(class_scope:mnist_DNN.Digit)
  ))
_sym_db.RegisterMessage(Digit)


import abc
import six
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities

class Betamnist_InferenceServicer(object):
  def GetInput(self, request, context):
    """get a request containing single test image
    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def GetMultiInput(self, request_iterator, context):
    """get a request containing multiple test images
    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)

class Betamnist_InferenceStub(object):
  def GetInput(self, request, timeout):
    """get a request containing single test image
    """
    raise NotImplementedError()
  GetInput.future = None
  def GetMultiInput(self, request_iterator, timeout):
    """get a request containing multiple test images
    """
    raise NotImplementedError()
  GetMultiInput.future = None

def beta_create_mnist_Inference_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  import mnist_DNN_pb2
  import mnist_DNN_pb2
  import mnist_DNN_pb2
  import mnist_DNN_pb2
  request_deserializers = {
    ('mnist_DNN.mnist_Inference', 'GetInput'): mnist_DNN_pb2.ImageArray.FromString,
    ('mnist_DNN.mnist_Inference', 'GetMultiInput'): mnist_DNN_pb2.ImageArray.FromString,
  }
  response_serializers = {
    ('mnist_DNN.mnist_Inference', 'GetInput'): mnist_DNN_pb2.Digit.SerializeToString,
    ('mnist_DNN.mnist_Inference', 'GetMultiInput'): mnist_DNN_pb2.Digit.SerializeToString,
  }
  method_implementations = {
    ('mnist_DNN.mnist_Inference', 'GetInput'): face_utilities.unary_unary_inline(servicer.GetInput),
    ('mnist_DNN.mnist_Inference', 'GetMultiInput'): face_utilities.stream_unary_inline(servicer.GetMultiInput),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)

def beta_create_mnist_Inference_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  import mnist_DNN_pb2
  import mnist_DNN_pb2
  import mnist_DNN_pb2
  import mnist_DNN_pb2
  request_serializers = {
    ('mnist_DNN.mnist_Inference', 'GetInput'): mnist_DNN_pb2.ImageArray.SerializeToString,
    ('mnist_DNN.mnist_Inference', 'GetMultiInput'): mnist_DNN_pb2.ImageArray.SerializeToString,
  }
  response_deserializers = {
    ('mnist_DNN.mnist_Inference', 'GetInput'): mnist_DNN_pb2.Digit.FromString,
    ('mnist_DNN.mnist_Inference', 'GetMultiInput'): mnist_DNN_pb2.Digit.FromString,
  }
  cardinalities = {
    'GetInput': cardinality.Cardinality.UNARY_UNARY,
    'GetMultiInput': cardinality.Cardinality.STREAM_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'mnist_DNN.mnist_Inference', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
